using Lsj.Util.Win32.BaseTypes;
using Lsj.Util.Win32.Enums;
using System;
using System.Runtime.InteropServices;
using static Lsj.Util.Win32.Enums.DeviceTechnologies;
using static Lsj.Util.Win32.Enums.HTFlags;
using static Lsj.Util.Win32.Enums.HTOutputFormats;
using static Lsj.Util.Win32.Enums.HTPatternSizes;
using static Lsj.Util.Win32.Enums.PrimaryOrders;
using static Lsj.Util.Win32.Enums.TextCapabilities;
using static Lsj.Util.Win32.Enums.PhysicalPixelCharacteristicsFlags;
using static Lsj.Util.Win32.Gdi32;

namespace Lsj.Util.Win32.Structs
{
    /// <summary>
    /// <para>
    /// The <see cref="GDIINFO"/> structure describes the graphics capabilities of a given device.
    /// </para>
    /// <para>
    /// From: <see href="https://docs.microsoft.com/zh-cn/windows/win32/api/winddi/ns-winddi-gdiinfo"/>
    /// </para>
    /// </summary>
    /// <remarks>
    /// GDI zero-initializes this structure before calling the driver-supplied DrvEnablePDEV function.
    /// The <see cref="xStyleStep"/>, <see cref="yStyleStep"/>, and <see cref="denStyleStep"/> members
    /// define how a cosmetic line style should advance as it draws each pixel of a cosmetic line.
    /// The amount advanced along the style for each pixel is defined as a fraction that depends on whether the line is x-styled or y-styled.
    /// If the line is x-styled, the style advances by the fractional amount dx/D for each pixel moved in the x direction.
    /// Otherwise the style advances by dy/D for each pixel moved in the y direction.
    /// The dots in the predefined line style PS_DOT are each one unit long.
    /// If the driver defines <see cref="xStyleStep"/> as one and <see cref="denStyleStep"/> as 5,
    /// then a dotted horizontal line consists of 5-pixels-on followed by 5-pixels-off, repeated.
    /// Each of these three numbers must be less than 65536, even though the caps members are <see cref="LONG"/> values.
    /// These style steps are defined by the driver to ensure that the dots and dashes in a line are a pleasing size on the output device.
    /// The horizontal and vertical steps can be different to correct for nontrivial aspect ratios.
    /// For example, on an EGA display, whose pixels are 33 percent higher than they are wide, you can set:
    /// <code>
    /// pdevcaps->xStyleStep   =  3;    // For an EGA
    /// pdevcaps->yStyleStep   =  4;
    /// pdevcaps->denStyleStep = 12;
    /// </code>
    /// In this case, horizontal dotted lines are 4-pixels-on, 4-pixels-off,
    /// because the style advances by 3/12 or 1/4 for each pixel. Vertical dotted lines are 3-pixels-on/3-pixels-off.
    /// Styled lines look better if both the x and y style steps divide evenly into the style denominator, as they do in the preceding example.
    /// This gives dashes and dots that are always the same length.
    /// GDI needs this information so that its bitmap functions can emulate exactly what the device does on its own surface.
    /// Applications can access this information to determine exactly which pixels will be turned on for styled lines.
    /// Refer also to Styled Cosmetic Lines.
    /// The halftone-related members, <see cref="cxHTPat"/>, <see cref="cyHTPat"/>, <see cref="pHTPatA"/>,
    /// <see cref="pHTPatB"/>, and <see cref="pHTPatC"/>, can be used in an OEM Unidrv rendering plug-in
    /// to define a custom halftone pattern consisting of either one or three colors.
    /// These members are checked only if the ulHTPatternSize member is set to <see cref="HT_PATSIZE_USER"/>.
    /// In this case an OEM can use these members to define a custom halftone pattern,
    /// based on data stored in a resource file or generated by an OEM customization module.
    /// The <see cref="cxHTPat"/> and <see cref="cyHTPat"/> members define the size of each of the three two-dimensional halftone pattern arrays.
    /// The <see cref="pHTPatA"/>, <see cref="pHTPatB"/>, and <see cref="pHTPatC"/> members point to the respective pattern arrays for each color.
    /// If only one pattern array is used, <see cref="pHTPatA"/>, <see cref="pHTPatB"/>, and <see cref="pHTPatC"/> point to it.
    /// Each byte threshold at a particular location in a halftone dither pattern determines
    /// whether the pixel at the corresponding output plane location will be on or off.
    /// A zero threshold value at a particular location in the pattern array indicates that the corresponding pixel location is ignored (is black).
    /// Threshold values from 1 to 255 provide the dither pattern with 255 levels of gray;
    /// if the pixel value in the output plane is greater than or equal to the threshold value for that location, the pixel is turned on.
    /// A pixel value less than its corresponding threshold value causes its pixel to be turned off in the output plane.
    /// See Customized Halftoning in Customizing Microsoft's Printer Drivers for more information.
    /// </remarks>
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct GDIINFO
    {
        /// <summary>
        /// HT_USERPAT_CX_MIN
        /// </summary>
        public const uint HT_USERPAT_CX_MIN = 4;

        /// <summary>
        /// HT_USERPAT_CX_MAX
        /// </summary>
        public const uint HT_USERPAT_CX_MAX = 256;

        /// <summary>
        /// HT_USERPAT_CY_MIN
        /// </summary>
        public const uint HT_USERPAT_CY_MIN = 4;

        /// <summary>
        /// HT_USERPAT_CY_MAX
        /// </summary>
        public const uint HT_USERPAT_CY_MAX = 256;

        /// <summary>
        /// PPG_DEFAULT
        /// </summary>
        public const uint PPG_DEFAULT = 0;

        /// <summary>
        /// PPG_SRGB
        /// </summary>
        public const uint PPG_SRGB = 1;

        /// <summary>
        /// Specifies the driver version number.
        /// The byte ordering of <see cref="ulVersion"/> has the following form.
        /// The high-order 16 bits must be set to zero.
        /// Bits 8 through 15 specify the version number of the Microsoft operating system for which the driver is designed.
        /// The high-order 4 bits of this range specify the major number of the version, the low-order 4 bits contain the minor number of the version.
        /// The low-order 8 bits of <see cref="ulVersion"/> specify the version number of the display driver;
        /// this value should be incremented for each release of the display driver binary file.
        /// The Display program in Control Panel indicates the version number contained in ulVersion, along with other driver-specific information.
        /// </summary>
        public ULONG ulVersion;

        /// <summary>
        /// Specifies the device technology.
        /// This member can be one of the values listed in the following table.
        /// <see cref="DT_CHARSTREAM"/>, <see cref="DT_PLOTTER"/>, <see cref="DT_RASCAMERA"/>, <see cref="DT_RASDISPLAY"/>, <see cref="DT_RASPRINTER"/>
        /// </summary>
        public DeviceTechnologies ulTechnology;

        /// <summary>
        /// Specifies the width of the physical surface.
        /// A positive value indicates that the width is in units of millimeters,
        /// while a negative value denotes that the width is in units of micrometers.
        /// </summary>
        public ULONG ulHorzSize;

        /// <summary>
        /// Specifies the height of the physical surface.
        /// A positive value indicates that the height is in units of millimeters,
        /// while a negative value denotes that the height is in units of micrometers.
        /// </summary>
        public ULONG ulVertSize;

        /// <summary>
        /// Specifies the width in pixels of the physical surface (display devices),
        /// or of the printable surface (printers).
        /// See also ulDesktopHorzRes.
        /// </summary>
        public ULONG ulHorzRes;

        /// <summary>
        /// Specifies the height in pixels of the physical surface (display devices), or of the printable surface (printers).
        /// </summary>
        public ULONG ulVertRes;

        /// <summary>
        /// Specifies the number of adjacent bits in each color plane.
        /// The total number of bits per pixel is the product of <see cref="cBitsPixel"/> and <see cref="cPlanes"/>.
        /// </summary>
        public ULONG cBitsPixel;

        /// <summary>
        /// Specifies the number of color planes.
        /// </summary>
        public ULONG cPlanes;

        /// <summary>
        /// For palettized devices, <see cref="ulNumColors"/> specifies the number of entries in the default color palette.
        /// For nonpalettized devices (which do not include printers), <see cref="ulNumColors"/> is set to -1.
        /// </summary>
        public ULONG ulNumColors;

        /// <summary>
        /// Is reserved and must be left set to zero.
        /// </summary>
        public ULONG flRaster;

        /// <summary>
        /// Specifies the width resolution of the device in logical pixels per inch.
        /// For printers, this member should be set to the printer's resolution in dpi.
        /// For displays, this member must be set to 96.
        /// </summary>
        public ULONG ulLogPixelsX;

        /// <summary>
        /// Specifies the height resolution of the device in logical pixels per inch.
        /// For printers, this member should be set to the printer's resolution in dpi.
        /// For displays, this member must be set to 96.
        /// </summary>
        public ULONG ulLogPixelsY;

        /// <summary>
        /// Specifies a flag describing Windows 3.1 text capabilities.
        /// If the driver <see cref="TC_SCROLLBLT"/> flag is in this member,
        /// it indicates that the console should perform text scrolling by redrawing the entire screen,
        /// using the driver-supplied DrvTextOut function rather than the DrvBitBlt or DrvCopyBits functions.
        /// The driver should set this flag if screen-to-screen bit-block transfers are slow.
        /// If this flag is not set, the driver is implicitly requesting that the console perform text scrolls through DrvBitBlt/DrvCopyBits.
        /// </summary>
        public TextCapabilities flTextCaps;

        /// <summary>
        /// Specifies the display number of DAC bits for the specified color.
        /// </summary>
        public ULONG ulDACRed;

        /// <summary>
        /// Specifies the display number of DAC bits for the specified color.
        /// </summary>
        public ULONG ulDACGreen;

        /// <summary>
        /// Specifies the display number of DAC bits for the specified color.
        /// </summary>
        public ULONG ulDACBlue;

        /// <summary>
        /// Specifies the relative width of a device pixel, in the range of one to 1000.
        /// </summary>
        public ULONG ulAspectX;

        /// <summary>
        /// Specifies the relative height of a device pixel, in the range of one to 1000.
        /// </summary>
        public ULONG ulAspectY;

        /// <summary>
        /// Specifies the square root of the sum of the squares of <see cref="ulAspectX"/> and <see cref="ulAspectY"/>.
        /// </summary>
        public ULONG ulAspectXY;

        /// <summary>
        /// Specifies the numerator of style advance for x-major lines, dx.
        /// For additional information, refer to the following Remarks section and Styled Cosmetic Lines.
        /// </summary>
        public LONG xStyleStep;

        /// <summary>
        /// Specifies the numerator of style advance for y-major lines, dy.
        /// For additional information, refer to the following Remarks section and Styled Cosmetic Lines.
        /// </summary>
        public LONG yStyleStep;

        /// <summary>
        /// Specifies the denominator of style advance, D.
        /// For additional information, refer to the following Remarks section and Styled Cosmetic Lines.
        /// </summary>
        public LONG denStyleStep;

        /// <summary>
        /// Specifies a POINTL structure that contains the size, in pixels, of the unwritable margin of a surface.
        /// </summary>
        public POINTL ptlPhysOffset;

        /// <summary>
        /// Specifies a SIZEL structure that contains the size, in pixels, of the entire surface, including unwritable margins.
        /// A SIZEL structure is identical to a <see cref="SIZE"/> structure.
        /// </summary>
        public SIZE szlPhysSize;

        /// <summary>
        /// Specifies the number of palette registers for an indexed device.
        /// </summary>
        public ULONG ulNumPalReg;

        /// <summary>
        /// Is a <see cref="COLORINFO"/> structure that defines the device's colors in CIE coordinate space.
        /// </summary>
        public COLORINFO ciDevice;

        /// <summary>
        /// For printers, specifies the number of pixels (or dots, or nozzles) per inch
        /// if the pixels are laid out side by side without overlapping or space between.
        /// For example, if the size of a pixel is 0.001 inch, this value is equal to one-divided-by 0.001.
        /// If the member is zero, GDI halftoning calculates this number based on the assumption that all pixels are connected with no overlapping.
        /// Because the physical dot size for most printers is larger than the measured dot size,
        /// GDI uses this value to approximate how many physical dots can be placed, based on the cell size (pattern size).
        /// A log regression is then performed to determine what is most linear;
        /// that is, where the dots should be placed for the best coverage to optimize the overlapped device pixels coverage (dot gain).
        /// For displays, this member should be set to zero.
        /// </summary>
        public ULONG ulDevicePelsDPI;

        /// <summary>
        /// Specifies the bit order of the device's primary colors or plane numbers for the halftone output.
        /// This member can be one of the values listed in the following table.
        /// <see cref="PRIMARY_ORDER_ABC"/>, <see cref="PRIMARY_ORDER_ACB"/>, <see cref="PRIMARY_ORDER_BAC"/>,
        /// <see cref="PRIMARY_ORDER_BCA"/>, <see cref="PRIMARY_ORDER_CBA"/>, <see cref="PRIMARY_ORDER_CAB"/>:
        /// </summary>
        public PrimaryOrders ulPrimaryOrder;

        /// <summary>
        /// Specifies the size of the halftone pattern.
        /// The values ending with AxBM are variations of the AxB patterns.
        /// In other words, SIZEAxB and SIZE_AxB_M differ by which pixels are lit in an A x B pattern.
        /// This member can be one of the following values:
        /// <see cref="HT_PATSIZE_2x2"/>, <see cref="HT_PATSIZE_2x2_M"/>, <see cref="HT_PATSIZE_4x4"/>, <see cref="HT_PATSIZE_4x4_M"/>,
        /// <see cref="HT_PATSIZE_6x6"/>, <see cref="HT_PATSIZE_6x6_M"/>, <see cref="HT_PATSIZE_8x8"/>, <see cref="HT_PATSIZE_8x8_M"/>,
        /// <see cref="HT_PATSIZE_10x10"/>, <see cref="HT_PATSIZE_10x10_M"/>, <see cref="HT_PATSIZE_12x12"/>, <see cref="HT_PATSIZE_12x12_M"/>,
        /// <see cref="HT_PATSIZE_14x14"/>, <see cref="HT_PATSIZE_14x14_M"/>, <see cref="HT_PATSIZE_16x16"/>, <see cref="HT_PATSIZE_16x16_M"/>,
        /// <see cref="HT_PATSIZE_SUPERCELL"/>, <see cref="HT_PATSIZE_SUPERCELL_M"/>, <see cref="HT_PATSIZE_USER"/>,
        /// <see cref="HT_PATSIZE_MAX_INDEX"/>, <see cref="HT_PATSIZE_DEFAULT"/>
        /// </summary>
        public HTPatternSizes ulHTPatternSize;

        /// <summary>
        /// Specifies the preferred output format for halftone.
        /// <see cref="HT_FORMAT_4BPP"/> uses only 8 full intensity colors
        /// while <see cref="HT_FORMATP_IRGB"/> uses all the 16 colors including the half-intensity colors.
        /// It is assumed that a 5 x 5 x 5 format (5 bits per color) is used for <see cref="HT_FORMAT_16BPP"/>.
        /// This member can be one of the following values:
        /// <see cref="HT_FORMAT_1BPP"/>, <see cref="HT_FORMAT_4BPP"/>, <see cref="HT_FORMAT_4BPP_IRGB"/>, <see cref="HT_FORMAT_8BPP"/>,
        /// <see cref="HT_FORMAT_16BPP"/>, <see cref="HT_FORMAT_24BPP"/>, <see cref="HT_FORMAT_32BPP"/>
        /// </summary>
        public HTOutputFormats ulHTOutputFormat;

        /// <summary>
        /// Specifies a combination of flags describing the device.
        /// These flags are needed for halftoning.
        /// This member can be a combination of the following values:
        /// <see cref="HT_FLAG_8BPP_CMY332_MASK"/>, <see cref="HT_FLAG_ADDITIVE_PRIMS"/>, <see cref="HT_FLAG_DO_DEVCLR_XFORM"/>,
        /// <see cref="HT_FLAG_HAS_BLACK_DYE"/>, <see cref="HT_FLAG_HIGH_INK_ABSORPTION"/>, <see cref="HT_FLAG_HIGHER_INK_ABSORPTION"/>,
        /// <see cref="HT_FLAG_HIGHEST_INK_ABSORPTION"/>, <see cref="HT_FLAG_INK_ABSORPTION_IDX0"/>, <see cref="HT_FLAG_INK_ABSORPTION_IDX1"/>,
        /// <see cref="HT_FLAG_INK_ABSORPTION_IDX2"/>, <see cref="HT_FLAG_INK_ABSORPTION_IDX3"/>, <see cref="HT_FLAG_INK_HIGH_ABSORPTION"/>,
        /// <see cref="HT_FLAG_INVERT_8BPP_BITMASK_IDX"/>, <see cref="HT_FLAG_LOW_INK_ABSORPTION"/>, <see cref="HT_FLAG_LOWER_INK_ABSORPTION"/>,
        /// <see cref="HT_FLAG_LOWEST_INK_ABSORPTION"/>, <see cref="HT_FLAG_NORMAL_INK_ABSORPTION"/>, <see cref="HT_FLAG_OUTPUT_CMY"/>,
        /// <see cref="HT_FLAG_PRINT_DRAFT_MODE"/>, <see cref="HT_FLAG_SQUARE_DEVICE_PEL"/>, <see cref="HT_FLAG_USE_8BPP_BITMASK"/>
        /// </summary>
        public HTFlags flHTFlags;

        /// <summary>
        /// The video refresh rate for the current display mode.
        /// This is the value returned by the miniport driver for the refresh rate for the current mode.
        /// The Display program in Control Panel displays the refresh rate contained in the <see cref="ulVRefresh"/> member.
        /// </summary>
        public ULONG ulVRefresh;

        /// <summary>
        /// This member indicates the preferred x-alignment for bit block transfers to the device.
        /// A value of zero indicates that bit block transfers are accelerated;
        /// any other nonnegative number indicates that bit block transfers are not accelerated,
        /// and gives the preferred horizontal alignment as a pixel multiple.
        /// This value is used by the system to determine the default alignment for window positions
        /// and is also used to set the initial full-drag default during setup.
        /// A value of zero indicates that full-drag should be on by default;
        /// any value other than zero indicates that full-drag should be off by default.
        /// </summary>
        public ULONG ulBltAlignment;

        /// <summary>
        /// 
        /// </summary>
        public ULONG ulPanningHorzRes;

        /// <summary>
        /// Should be ignored by the driver and remain zero-initialized.
        /// </summary>
        public ULONG ulPanningVertRes;

        /// <summary>
        /// 
        /// </summary>
        public ULONG xPanningAlignment;

        /// <summary>
        /// Should be ignored by the driver and remain zero-initialized.
        /// </summary>
        public ULONG yPanningAlignment;

        /// <summary>
        /// 
        /// </summary>
        public ULONG cxHTPat;

        /// <summary>
        /// Specify the width and height, respectively, in pixels, of the user-supplied halftone dither pattern.
        /// The value of <see cref="cxHTPat"/> must be in the range <see cref="HT_USERPAT_CX_MIN"/> to <see cref="HT_USERPAT_CX_MAX"/>, inclusive.
        /// The value of <see cref="cyHTPat"/> must be in the range <see cref="HT_USERPAT_CY_MIN"/> to <see cref="HT_USERPAT_CY_MAX"/>, inclusive.
        /// These constants are defined in winddi.h.
        /// See the following Remarks section for more information.
        /// </summary>
        public ULONG cyHTPat;

        /// <summary>
        /// 
        /// </summary>
        public IntPtr pHTPatA;

        /// <summary>
        /// 
        /// </summary>
        public IntPtr pHTPatB;

        /// <summary>
        /// Point to the user-defined halftone dither patterns for primary colors A, B, and C,
        /// respectively, as defined by the PRIMARY_ORDER_XXX value in the <see cref="ulPrimaryOrder"/> member.
        /// Each dither pattern must be a valid two-dimensional byte array of size <see cref="cxHTPat"/> by <see cref="cyHTPat"/>.
        /// See the following Remarks section for more information.
        /// </summary>
        public IntPtr pHTPatC;

        /// <summary>
        /// Specifies a set of flags that indicate the shading and blending capabilities of the device.
        /// Display drivers should ignore this member and should leave it set to zero.
        /// For printer drivers, the value that the driver places in this member is the value
        /// that GDI reports when an application calls <code>GetDeviceCaps(hdc, SHADEBLENDCAPS)</code>.
        /// The <see cref="GetDeviceCaps"/> function is described in the Microsoft Window SDK documentation.
        /// </summary>
        public ULONG flShadeBlend;

        /// <summary>
        /// Specifies the way that color fragments are configured to form pixels on the display device.
        /// The color fragments on the display device can be arranged in RGB order,
        /// or in BGR order, completely independent of the RGB ordering in the frame buffer.
        /// The color fragments can be configured in horizontal stripes in which all of the fragments in one row are the same color.
        /// Alternatively, the color fragments can be configured in vertical stripes, in which all fragments in one column are the same color.
        /// Vertical striping is preferred, since it effectively provides three separate fragments in a row for each pixel,
        /// thereby giving greater horizontal subpixel resolution.
        /// The <see cref="ulPhysicalPixelCharacteristics"/> member must be set to one of the values shown in the following table:
        /// <see cref="PPC_DEFAULT"/>, <see cref="PPC_BGR_ORDER_HORIZONTAL_STRIPES"/>, <see cref="PPC_BGR_ORDER_VERTICAL_STRIPES"/>,
        /// <see cref="PPC_RGB_ORDER_HORIZONTAL_STRIPES"/>, <see cref="PPC_RGB_ORDER_VERTICAL_STRIPES"/>, <see cref="PPC_UNDEFINED"/>
        /// </summary>
        public PhysicalPixelCharacteristicsFlags ulPhysicalPixelCharacteristics;

        /// <summary>
        /// Specifies the gamma of the display device.
        /// This member should be set to either the gamma of the physical pixel, scaled by a factor of 1000, or to one of the following values.
        /// For example, a gamma value of 2.2 would be represented as 2200.
        /// <see cref="PPG_DEFAULT"/>: The driver has no knowledge of the gamma for the device.
        /// <see cref="PPG_SRGB"/>:  	The device uses an sRGB gamma.
        /// </summary>
        public ULONG ulPhysicalPixelGamma;
    }
}
