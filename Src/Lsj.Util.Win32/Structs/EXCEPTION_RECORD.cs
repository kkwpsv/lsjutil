using Lsj.Util.Win32.BaseTypes;
using Lsj.Util.Win32.Enums;
using Lsj.Util.Win32.Marshals.ByValULONG_PTRArrayStructs;
using System;
using System.Runtime.InteropServices;
using static Lsj.Util.Win32.Constants;
using static Lsj.Util.Win32.Enums.ExceptionCodes;
using static Lsj.Util.Win32.Enums.ExceptionFlags;
using static Lsj.Util.Win32.Kernel32;

namespace Lsj.Util.Win32.Structs
{
    /// <summary>
    /// <para>
    /// Describes an exception.
    /// </para>
    /// <para>
    /// From: <see href="https://docs.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-exception_record"/>
    /// </para>
    /// </summary>
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct EXCEPTION_RECORD
    {
        /// <summary>
        /// The reason the exception occurred.
        /// This is the code generated by a hardware exception,
        /// or the code specified in the <see cref="RaiseException"/> function for a software-generated exception.
        /// The following tables describes the exception codes that are likely to occur due to common programming errors.
        /// <see cref="EXCEPTION_ACCESS_VIOLATION"/>:
        /// The thread tried to read from or write to a virtual address for which it does not have the appropriate access.
        /// <see cref="EXCEPTION_ARRAY_BOUNDS_EXCEEDED"/>:
        /// The thread tried to access an array element that is out of bounds and the underlying hardware supports bounds checking.
        /// <see cref="EXCEPTION_BREAKPOINT"/>:
        /// A breakpoint was encountered.
        /// <see cref="EXCEPTION_DATATYPE_MISALIGNMENT"/>:
        /// The thread tried to read or write data that is misaligned on hardware that does not provide alignment.
        /// For example, 16-bit values must be aligned on 2-byte boundaries; 32-bit values on 4-byte boundaries, and so on.
        /// <see cref="EXCEPTION_FLT_DENORMAL_OPERAND"/>:
        /// One of the operands in a floating-point operation is denormal.
        /// A denormal value is one that is too small to represent as a standard floating-point value.
        /// <see cref="EXCEPTION_FLT_DIVIDE_BY_ZERO"/>:
        /// The thread tried to divide a floating-point value by a floating-point divisor of zero.
        /// <see cref="EXCEPTION_FLT_INEXACT_RESULT"/>:
        /// The result of a floating-point operation cannot be represented exactly as a decimal fraction.
        /// <see cref="EXCEPTION_FLT_INVALID_OPERATION"/>:
        /// This exception represents any floating-point exception not included in this list.
        /// <see cref="EXCEPTION_FLT_OVERFLOW"/>:
        /// The exponent of a floating-point operation is greater than the magnitude allowed by the corresponding type.
        /// <see cref="EXCEPTION_FLT_STACK_CHECK"/>:
        /// The stack overflowed or underflowed as the result of a floating-point operation.
        /// <see cref="EXCEPTION_FLT_UNDERFLOW"/>:
        /// The exponent of a floating-point operation is less than the magnitude allowed by the corresponding type.
        /// <see cref="EXCEPTION_ILLEGAL_INSTRUCTION"/>:
        /// The thread tried to execute an invalid instruction.
        /// <see cref="EXCEPTION_IN_PAGE_ERROR"/>:
        /// The thread tried to access a page that was not present, and the system was unable to load the page.
        /// For example, this exception might occur if a network connection is lost while running a program over the network.
        /// <see cref="EXCEPTION_INT_DIVIDE_BY_ZERO"/>:
        /// The thread tried to divide an integer value by an integer divisor of zero.
        /// <see cref="EXCEPTION_INT_OVERFLOW"/>:
        /// The result of an integer operation caused a carry out of the most significant bit of the result.
        /// <see cref="EXCEPTION_INVALID_DISPOSITION"/>:
        /// An exception handler returned an invalid disposition to the exception dispatcher.
        /// Programmers using a high-level language such as C should never encounter this exception.
        /// <see cref="EXCEPTION_NONCONTINUABLE_EXCEPTION"/>:
        /// The thread tried to continue execution after a noncontinuable exception occurred.
        /// <see cref="EXCEPTION_PRIV_INSTRUCTION"/>:
        /// The thread tried to execute an instruction whose operation is not allowed in the current machine mode.
        /// <see cref="EXCEPTION_SINGLE_STEP"/>:
        /// A trace trap or other single-instruction mechanism signaled that one instruction has been executed.
        /// <see cref="EXCEPTION_STACK_OVERFLOW"/>:
        /// The thread used up its stack.
        /// Another exception code is likely to occur when debugging console processes.
        /// It does not arise because of a programming error.
        /// The <see cref="DBG_CONTROL_C"/> exception code occurs when CTRL+C is input to a console process that handles CTRL+C signals and is being debugged.
        /// This exception code is not meant to be handled by applications.
        /// It is raised only for the benefit of the debugger, and is raised only when a debugger is attached to the console process.
        /// </summary>
        public ExceptionCodes ExceptionCode;

        /// <summary>
        /// The exception flags.
        /// This member can be either zero, indicating a continuable exception, or <see cref="EXCEPTION_NONCONTINUABLE"/> indicating a noncontinuable exception.
        /// Any attempt to continue execution after a noncontinuable exception causes the <see cref="EXCEPTION_NONCONTINUABLE_EXCEPTION"/> exception.
        /// </summary>
        public ExceptionFlags ExceptionFlags;

        /// <summary>
        /// A pointer to an associated <see cref="EXCEPTION_RECORD"/> structure.
        /// Exception records can be chained together to provide additional information when nested exceptions occur.
        /// </summary>
        public IntPtr ExceptionRecord;

        /// <summary>
        /// The address where the exception occurred.
        /// </summary>
        public PVOID ExceptionAddress;

        /// <summary>
        /// The number of parameters associated with the exception.
        /// This is the number of defined elements in the <see cref="ExceptionInformation"/> array.
        /// </summary>
        public DWORD NumberParameters;

        /// <summary>
        /// An array of additional arguments that describe the exception.
        /// The <see cref="RaiseException"/> function can specify this array of arguments.
        /// For most exception codes, the array elements are undefined.
        /// The following table describes the exception codes whose array elements are defined.
        /// <see cref="EXCEPTION_ACCESS_VIOLATION"/>:
        /// The first element of the array contains a read-write flag that indicates the type of operation that caused the access violation.
        /// If this value is zero, the thread attempted to read the inaccessible data.
        /// If this value is 1, the thread attempted to write to an inaccessible address.
        /// If this value is 8, the thread causes a user-mode data execution prevention (DEP) violation.
        /// The second array element specifies the virtual address of the inaccessible data.
        /// <see cref="EXCEPTION_IN_PAGE_ERROR"/>:
        /// The first element of the array contains a read-write flag that indicates the type of operation that caused the access violation.
        /// If this value is zero, the thread attempted to read the inaccessible data.
        /// If this value is 1, the thread attempted to write to an inaccessible address.
        /// If this value is 8, the thread causes a user-mode data execution prevention (DEP) violation.
        /// The second array element specifies the virtual address of the inaccessible data.
        /// The third array element specifies the underlying <see cref="NTSTATUS"/> code that resulted in the exception.
        /// </summary>
        public ByValULONG_PTRArrayStructForSize15 ExceptionInformation;
    }
}
