using Lsj.Util.Win32.BaseTypes;
using Lsj.Util.Win32.Enums;
using Lsj.Util.Win32.Marshals;
using System.Runtime.InteropServices;
using static Lsj.Util.Win32.BaseTypes.BOOL;
using static Lsj.Util.Win32.Enums.ConsoleModes;
using static Lsj.Util.Win32.Enums.ControlKeyStates;

namespace Lsj.Util.Win32.Structs
{
    /// <summary>
    /// <para>
    /// Describes a keyboard input event in a console <see cref="INPUT_RECORD"/> structure.
    /// </para>
    /// <para>
    /// From: <see href="https://docs.microsoft.com/zh-cn/windows/console/key-event-record-str"/>
    /// </para>
    /// </summary>
    /// <remarks>
    /// Enhanced keys for the IBM® 101- and 102-key keyboards are the INS, DEL, HOME, END, PAGE UP, PAGE DOWN,
    /// and direction keys in the clusters to the left of the keypad; and the divide (/) and ENTER keys in the keypad.
    /// Keyboard input events are generated when any key, including control keys, is pressed or released.
    /// However, the ALT key when pressed and released without combining with another character,
    /// has special meaning to the system and is not passed through to the application.
    /// Also, the CTRL+C key combination is not passed through if the input handle is in processed mode (<see cref="ENABLE_PROCESSED_INPUT"/>).
    /// </remarks>
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct KEY_EVENT_RECORD
    {
        /// <summary>
        /// If the key is pressed, this member is <see cref="TRUE"/>.
        /// Otherwise, this member is <see cref="FALSE"/> (the key is released).
        /// </summary>
        public BOOL bKeyDown;

        /// <summary>
        /// The repeat count, which indicates that a key is being held down.
        /// For example, when a key is held down, you might get five events with this member equal to 1,
        /// one event with this member equal to 5, or multiple events with this member greater than or equal to 1.
        /// </summary>
        public WORD wRepeatCount;

        /// <summary>
        /// A virtual-key code that identifies the given key in a device-independent manner.
        /// </summary>
        public VirtualKeyCodes wVirtualKeyCode;

        /// <summary>
        /// The virtual scan code of the given key that represents the device-dependent value generated by the keyboard hardware.
        /// </summary>
        public WORD wVirtualScanCode;

        /// <summary>
        /// A union of the following members.
        /// </summary>
        public KEY_EVENT_RECORD_uChar uChar;

        /// <summary>
        /// The state of the control keys. This member can be one or more of the following values.
        /// <see cref="CAPSLOCK_ON"/>, <see cref="ENHANCED_KEY"/>, <see cref="LEFT_ALT_PRESSED"/>, <see cref="LEFT_CTRL_PRESSED"/>,
        /// <see cref="NUMLOCK_ON"/>, <see cref="RIGHT_ALT_PRESSED"/>, <see cref="RIGHT_CTRL_PRESSED"/>, <see cref="SCROLLLOCK_ON"/>,
        /// <see cref="SHIFT_PRESSED"/>
        /// </summary>
        public ControlKeyStates dwControlKeyState;

        /// <summary>
        /// 
        /// </summary>
        [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Unicode)]
        public struct KEY_EVENT_RECORD_uChar
        {
            /// <summary>
            /// Translated Unicode character.
            /// </summary>
            [FieldOffset(0)]
            public WCHAR UnicodeChar;

            /// <summary>
            /// Translated ASCII character.
            /// </summary>
            [FieldOffset(0)]
            public CHAR AsciiChar;
        }
    }
}
